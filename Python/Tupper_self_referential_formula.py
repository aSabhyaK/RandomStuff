from functools import reduce;

def Tupper_self_referential_formula():

    #displays 'tupper'
    #k = 11446143048577322873420746886032253602081036176820637725351572728824205319356548595443573778191478330600315648025516347418384227839098139252614970555108049338384907856705947495396329029490965408180552069582726103040

    #displays a smiling face
    #k = 6064344935827571835614778444061589919313891311;
    
    #prints the Tupper's formula directly
    k = 960939379918958884971672962127852754715004339660129306651505519271702802395266424689642842174350718121267153782770623355993237280874144307891325963941337723487857735749823926629715517173716995165232890538221612403238855866184013235585136048828693337902491454229288667081096184496091705183454067827731551705405381627380967602565625016981482083418783163849115590225610003652351370343874461848378737238198224849863465033159410054974700593138339226497249461751545728366702369745461014655997933798537483143786841806593422227898388722980000748404719;
    
    #displays 'Quora'
    #k = 37669073689472413981038757357174421250751615080136175078863731619709820137852535934054444106976288660765441816156055020820524154403449017577048931876895774532717137569451940316881379617664146758321450980308485802669600502037142233219986858109513902092647501593604707677330472943;
    def f(x,y):
        d = ((-17 * x) - (y % 17))
        e = reduce(lambda x,y: x*y, [2 for x in range(-d)]) if d else 1
        f = ((y // 17) // e)
        g = f % 2
        return 0.5 < g

    for y in range(k+16, k-1, -1):
    #for y in range(k - 17, k, 1):
        line = ""
        for x in range(0, 107):
            if f(x,y):
                line += " "
            else:
                line += "X"
        print(line);

Tupper_self_referential_formula()